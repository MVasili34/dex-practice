@page "/dashboard"
@using Microsoft.EntityFrameworkCore;
<PageTitle>Панель управления</PageTitle>
@if (clients is null || employees is null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="d-flex justify-content-center flex-wrap">
    <div class="card text-white bg-success mb-3 mx-2" style="max-width: 18rem; font-size: 18px;">
        <div  class="card-header">Клиенты</div>
        <div class="card-body">
            <h4 class="card-title" style="color: #fff">На текущий момент банком обслуживается:</h4>
            <p class="card-text">@clients?.Count() клиентов</p>
        </div>
    </div>
    <div class="card text-white bg-info mb-3 mx-2" style="max-width: 18rem; font-size: 18px;">
        <div  class="card-header">Банковские счета</div>
        <div class="card-body">
            <h4 class="card-title" style="color: #fff">На текущий момент в банке открыто:</h4>
            <p class="card-text">@accountsAmount счетов</p>
        </div>
    </div>
    <div class="card text-white bg-secondary mb-3 mx-2" style="max-width: 18rem; font-size: 18px;">
        <div class="card-header">Сотрудники</div>
        <div class="card-body">
            <h4 class="card-title" style="color: #fff">На текущий момент в банке работает:</h4>
            <p class="card-text">@employees?.Count() сотрудников</p>
        </div>
    </div>
    <div class="card text-white bg-danger mb-3 mx-2" style="max-width: 18rem; font-size: 18px;">
        <div class="card-header">Валюты</div>
        <div class="card-body">
             <h4 class="card-title" style="color: #fff">На текущий момент в обороте банка используется:</h4>
             <p class="card-text">@chartData?.Length валют</p>
        </div>
    </div>
</div>
<div class="container">
    <div class="row">
        <div class="col-sm-6">
            <h2>Общая сумма средств по каждой валюте</h2>
                <RadzenChart >
                    <link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css" />
                        <RadzenBarSeries Data="@chartData" CategoryProperty="Currency" Title="Сумма"
                          LineType="LineType.Dashed" ValueProperty="TotalAmount">
                          <RadzenSeriesDataLabels Visible="@true" />
                        </RadzenBarSeries>
                        <RadzenValueAxis>
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle />
                        </RadzenValueAxis>
                        <RadzenBarOptions Radius="10" />
                        <RadzenLegend Visible="false" />
                </RadzenChart>
        </div>
        <div class="col-sm-6">
            <h2>Наиболее используемые валюты</h2>
                <RadzenChart >
                    <RadzenPieSeries Data="@pieData" Title="Кол-во счетов: "
                         CategoryProperty="Currency" ValueProperty="Count">
                    <RadzenSeriesDataLabels Visible="true" />
                </RadzenPieSeries>
                </RadzenChart>
                
        </div>
        <div >
           <h2>Возрастное распределение клиентов (%)</h2>
              <RadzenChart>
                    <RadzenLineSeries Smooth="true" Data="@lineData" CategoryProperty="Age" Title="Процент клиентов"
                    ValueProperty="TotalAmount" RenderingOrder="1">
                        <RadzenMarkers MarkerType="MarkerType.Circle" />
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="20" />
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Revenue in USD" />

            </RadzenChart>
        </div>
    </div>
</div>
}
@code {
    class DataItem
    {
        public string? Currency { get; set; }
        public decimal? TotalAmount { get; set; }
    }
    class CurrencyCount
    {
        public string? Currency { get; set; }
        public decimal? Count { get; set; }
    }
    class ClientsAge
    {
        public int? Age { get; set; }
        public double? TotalAmount { get; set; }
    }
    private IEnumerable<Client>? clients;

    private IEnumerable<Employee>? employees;

    private DataItem[]? chartData;
    private CurrencyCount[]? pieData;
    private ClientsAge[]? lineData;

    private int accountsAmount;

    protected override async Task OnParametersSetAsync()
    {
        using (HttpClient http = new())
        {
            clients = await http.GetFromJsonAsync<IEnumerable<Client>>("https://localhost:5001/api/clients");
            employees = await http.GetFromJsonAsync<IEnumerable<Employee>>("https://localhost:5001/api/employees");
            if (clients is not null)
            {
                accountsAmount = clients.Select(p => p.Accounts.Count()).Sum();
                await GenerateChartData();
            }
        }
    }

    /// <summary>
    /// Метод обработки данных для построения диаграмм
    /// </summary>
    private async Task GenerateChartData()
    {
        var chart = await Task.Run(() => clients?
            .SelectMany(client => client.Accounts)
            .GroupBy(account => account.CurrencyIso)
            .Select(group => new
            {
                Currency = group.Key,
                TotalAmount = group.Sum(account => account.Amount),
                TotalCount = group.Count()
            }).Distinct().OrderByDescending(p => p.TotalAmount).ToArray()
        );
        chartData = new DataItem[chart!.Length];
        pieData = new CurrencyCount[chart!.Length];

        if (chart is not null)
        {
            Parallel.For(0, chart.Length, i =>
            {
                chartData[i] = new DataItem() { Currency = chart[i].Currency, TotalAmount = chart[i].TotalAmount };
                pieData[i] = new CurrencyCount() { Currency = chart[i].Currency, Count = chart[i].TotalCount };
            });
        }

        var ages = await Task.Run(() =>  clients?
            .Select(p => new
            {
                Age = DateTime.Now.Year - p.DateOfBirth.Year,
            }).GroupBy(c => c.Age)
            .Select(p => new
            {
                Age = p.Key,
                TotalAmount = (double)p.Count() / clients.Count() * 100
            }).ToArray()
        );
        lineData = new ClientsAge[ages!.Length];

        if (chart is not null)
        {
            Parallel.For(0, ages.Length, i =>
            {
                lineData[i] = new ClientsAge() { Age = ages[i].Age, TotalAmount = ages[i].TotalAmount };
            });
        }
    }
}